// @generated
// This file is automatically generated by Kanel. Do not modify manually.

import { productsId, type ProductsId } from "./Products";
import { locationsId, type LocationsId } from "./Locations";
import { companiesId, type CompaniesId } from "./Companies";
import { z } from "zod";

/** Identifier type for public.products_locations */
export type ProductsLocationsId = string & { __brand: "ProductsLocationsId" };

/** Represents the table public.products_locations */
export default interface ProductsLocations {
  id: ProductsLocationsId;

  count: BigInt;

  productId: ProductsId | null;

  locationId: LocationsId | null;

  companyId: CompaniesId | null;
}

/** Represents the initializer for the table public.products_locations */
export interface ProductsLocationsInitializer {
  /** Default value: gen_random_uuid() */
  id?: ProductsLocationsId;

  /** Default value: 0 */
  count?: BigInt;

  productId?: ProductsId | null;

  locationId?: LocationsId | null;

  companyId?: CompaniesId | null;
}

/** Represents the mutator for the table public.products_locations */
export interface ProductsLocationsMutator {
  id?: ProductsLocationsId;

  count?: BigInt;

  productId?: ProductsId | null;

  locationId?: LocationsId | null;

  companyId?: CompaniesId | null;
}

export const productsLocationsId = z.string() as unknown as z.Schema<ProductsLocationsId>;

export const productsLocations = z.object({
  id: productsLocationsId,
  count: z.string(),
  productId: productsId.nullable(),
  locationId: locationsId.nullable(),
  companyId: companiesId.nullable(),
}) as unknown as z.Schema<ProductsLocations>;

export const productsLocationsInitializer = z.object({
  id: productsLocationsId.optional(),
  count: z.string().optional(),
  productId: productsId.optional().nullable(),
  locationId: locationsId.optional().nullable(),
  companyId: companiesId.optional().nullable(),
}) as unknown as z.Schema<ProductsLocationsInitializer>;

export const productsLocationsMutator = z.object({
  id: productsLocationsId.optional(),
  count: z.string().optional(),
  productId: productsId.optional().nullable(),
  locationId: locationsId.optional().nullable(),
  companyId: companiesId.optional().nullable(),
}) as unknown as z.Schema<ProductsLocationsMutator>;
